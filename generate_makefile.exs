version = Path.join(__DIR__, "VERSION") |> File.read! |> String.strip
IO.puts version

{commitish, _} = System.cmd("git", ["log", "--pretty=format:%hQQ%adQQ%f", "-1"])
thing = String.split(commitish, "QQ")
IO.puts "Building default portions"
initial = "# THIS FILE WAS GENERATED BY `build_makefile.exs`
# #{Enum.join(thing, "\n# ")}

default: rpi3

ifdef SILENT
.SILENT:
endif

dev_env:
\texport MIX_ENV=dev

prod_env:
\texport MIX_ENV=prod

clean:
\t$(info Cleaning)
\trm -rf nerves/NERVES_SYSTEM_*
\trm -rf nerves/nerves_system_br
\trm -rf npm-debug*
\trm -rf erl_crash.dump
\trm -rf doc
\trm -rf cover
\trm -rf deps
\trm -rf node_modules
\trm -rf cache
\trm -rf _build
\trm -rf images
\trm -rf _images

test: dev_env
\tscripts/run_tests.sh

travis_test: dev_env
\tscripts/run_travis_tests.sh

## End default portion.\n"

build_system_part = fn(sys) ->
"\n## begin #{sys} portion.

## #{sys} env
env-#{sys}: prod_env
\texport NERVES_TARGET=#{sys}

## #{sys} build
#{sys}: env-#{sys} system-#{sys} firmware-#{sys}
\t$(info Building stuff for #{sys})

## #{sys} create-build
create-build-#{sys}:
\tscripts/clone_system.sh #{sys}

## #{sys} system
system-#{sys}: create-build-#{sys}
\t$(info Building Linux System for #{sys})
\tscripts/build_system.sh #{sys}

## #{sys} firmware
firmware-#{sys}:
\t$(info Building Firmware for #{sys})
\tscripts/build_firmware.sh #{sys}

release-#{sys}: #{sys}
\tscripts/build_release_images.sh #{sys} #{version}

## end #{sys} portion."
end

list = File.ls!("nerves")
only_systems = Enum.reduce(list, [], fn(d, acc) ->
  case d do
    # ignore nerves_system_br
    "nerves_system_br" -> acc
    "nerves_system_"<> sys -> [sys | acc]
    _ -> acc
  end
end)

initial_mod = Enum.reduce(only_systems, initial, fn(sys, acc) ->
  IO.puts "Defining system: #{sys}"
  acc <> build_system_part.(sys)
end)

IO.puts "Defining release for #{version}"
final = initial_mod <>
"\n\n## Release will build all the systems.
release: clean #{Enum.map(only_systems, fn(a) -> " release-"<>a end)}"

IO.puts "Writing file."
File.write("Makefile", final)
blah = "release-#{version}"
IO.puts blah
File.rm "./release-latest"
File.ln_s(blah, "./release-latest")
